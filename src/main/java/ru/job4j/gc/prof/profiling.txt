Профилирование проводится с ограниченным размером хипа до 7 мб.
1) JMAP
При старте приложение без items занимает 4.6 мб. Общее число объектов равно 6.2k.

После добавления 2k items хип заполняется до 5.3 мб. При этом сами items занимают только 0.048 мб.
Общее число объектов равно 8.4k.

После удаления всех items хип по прежнему заполнен до 5.3 мб. Объекты items до сих пор находятся в памяти.
Общее число объектов равно 8.4k.

После добавления новых 4к items хип заполнен до 5.6 мб. Всего в хипе 4к items.
Общее число объектов равно 10k.

Еще 4к - хип 5.9, объектов 11к.
Еще 4к - out of memory.

2) JSTAT
Старт:
    eaden = 0/2048
    s0 = 0/0
    s1 = 892.9/1024
    old = 3580/5120
    малых сборок 6
    полных сборок 0
Добавление 2к items = одна малая сборка
    eaden = 0/2048
    s0 = 0/0
    s1 = 987,8/1024 = дополнилось
    old = 4772,9/5120 = дополнилось
    малых сборок 7 = +1
    полных сборок 0
Удаление 2к items = никак не повлияло
    eaden = 0/2048
    s0 = 0/0
    s1 = 987,8/1024
    old = 4772,9/5120
    малых сборок 7
    полных сборок 0
Добавление 4к items = S1 стерся, old расширился и дополнился, прошла 1 малая и 1 полная сборки
    eaden = 0/2048
    s0 = 0/0
    s1 = 0/0 = эта область пропала?
    old = 5007,2/6144,0 = увеличился размер и дополнилось содержимое
    малых сборок 8 = +1
    полных сборок 1
Добавление 4к items = old дополнился, 2 малах и 2 полных сборки
    eaden = 0/2048
    s0 = 0/0
    s1 = 0/0
    old = 5793,3/6144,0 = дополнилось содержимое
    малых сборок 10 = +2
    полных сборок 3 = + 2
Добавление 4к items = out of memory

3) JCONSOLE
Размер хипа увеличен до 10 мб.

При старте график
    память заполняется до 6+ мб,
    при недолгом простое наблюдается небольшие колебания в районе 1 мб.
Добавление 2к items
    память выделяется в три приема в общем размере 1 мб (до 7 мб),
    затем происходит сборка и загрузка памяти выравнивается снова на +- 6.2 мб (полная сборка?).
При недолгом простое проиходят переодически малые сборки.

После удаления всех items
    происходит сборка на +- 0.25 мб. График выравнивается на 6 мб.

При добавлении 4к items
    потребление памяти примерно на 1.3 мб,
    затем происходит сборка примерно на 0.5 мб,
    затем график выравнивается на 6.7 мб, происходят малые сборки.

Добавляем еще 4к items
    график поднимается до 7.6 мб, наблюдается медлееный рост.

Добавляем еще 4к items
    программа падает с ошибкой out of memory.

Согласно отчету утилиты, за время работы программы прошло
    70 малых сборок, среднее время 0.15 сек
    27 полных, среднее время 0.67 сек

Приложение упало при заполненности хипа на 7.5 мб из 10 возможных.

4) VisualVM

При старте график стоит на 5.7 мб.

Добавили 2к items
    график постепенно поднялся до 6.8 мб
    затем сбока и график выравнялся на 5.8 мб
Удалили все items
    никаких изменений
Добавили 4k items
    график поднялся до 6.8
    затем сбока и выравнивание на 6мб
Еще 4k items
    график поднялся до 7.2мб
    затем выравнивается на 6.9 мб.
Еще 4к items
    подъем до 7.3 мб
    крошечная сбрка и выравнивание на 7.2 мб
Еще 6к items
    подъем до 8.1 мб
    видимых сборок нет
Еще 10к items
    out of memory

По всей видимости эта утилита оказывает меньше влияния на память, нежели jconsole
т.к. здесь приложение продержалось дольше при равном объеме памяти
















